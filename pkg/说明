可脱离项目使用的东西




func initUserHdl(db *gorm.DB, server *gin.Engine, rds redis.Cmdable, codeSvc service.CodeService) {
	ud := dao.NewUserDao(db)
	ca := cache.NewUserCache(rds)
	repo := repository.NewCacheUsersRepository(ud, ca)
	svc := service.NewUsersService(repo)
	hdl := web.NewUserHandler(svc, codeSvc)
	hdl.RegisterRouter(server)
}

func initWebServer(rds *redis.Client) *gin.Engine {
	router := gin.Default()
	router.Use(cors.New(cors.Config{
		AllowCredentials: true,
		AllowHeaders:     []string{"Content-Type", "Authorization"}, // 这里的Authorization代表的是jwt中的头部
		ExposeHeaders:    []string{"x-jwt-token"},                   // 允许前端能够访问后端响应中带的头部 ，一般在公司中可能加一些自定义头部，依次在这里加就行
		AllowOriginFunc: func(origin string) bool {
			if strings.HasPrefix(origin, "http://localhost") {
				return true
			}
			return strings.Contains(origin, "your_company.com")
		},
		MaxAge: 12 * time.Hour,
	}))
	useJwtSession(router)

	// 会限流 报429错误http状态码
	router.Use(ratelimit.NewBuilder(rds, time.Minute, 100).Build())

	return router
}
func useSession(server *gin.Engine) {
	//创建基于cookie的存储引擎，参数是用于加密的密钥
	store := cookie.NewStore([]byte("secret"))
	// 基于内存的实现  32位或者64位的随机密钥，最好不要用特殊符号,有时可能识别不了
	//store := memstore.NewStore([]byte(""), []byte(""))
	// 基于redis实现  // 最后byte 身份认证和数据加密 这两者加上授权就是信息安全的三个核心概念
	//store, err := redis.NewStore(5, "tcp", "39.105.211.136:6379", "",
	//	[]byte("rX6`tC9[hP5:nY0#eW3_lK3]eV5@zO3>"), []byte("jI2.hR2:vC6~uV3;cQ1_wV3:mK5$nL5."))
	//if err != nil {
	//	panic(err)
	//}

	server.Use(sessions.Sessions("ssid", store))
	login := &middleware.LoginMiddlewareBuilder{}
	server.Use(login.CheckLogin())
}
func useJwtSession(server *gin.Engine) {
	login := middleware.LoginJwtMiddlewareBuilder{}
	server.Use(login.CheckLogin())

	/*
	   优缺点：
	   1.不依赖三方存储（提高性能）
	   2. 适合分布式

	   1. 对加密依赖大容易泄密
	    2. 最好不要在jwt里放敏感信息
	*/

}
